Creating A Linked List

1. Start by creating your node:
class Node {
    constructor(data) {
        this.data = data
        this.next = null
        this.prev = null
    }
}

or factory function

function node(data) {
    return {
        data,
        next: null,
        prev: null
    }
}

2. Create your linked list class or factory function

class LinkedList {
    constructor() {
        this.head = null
        this.tail = null
        this.size = 0
    }

    addSongToEnd(data) {
        const newNode = new Node(data)
        //If there is no head node, then newNode has to become the head and it will also become the tail
        if (!this.head) {
            this.head = newNode
            this.tail = newNode
        } else {
            let current = head
            while (current.next) {
                current = current.next
            }
            current.next = newNode
        }
    }
}


Problem: Reverse Linked List

Given the head of a singly linked list, reverse the list and return the new head.
You must reverse the list in-place using only constant extra space.

// class ListNode {
//   constructor(val, next) {
//     this.val = (val === undefined ? 0 : val);
//     this.next = (next === undefined ? null : next);
//   }
// }


// Example:
// Input: 1 -> 2 -> 3 -> 4 -> 5 -> null
// Output: 5 -> 4 -> 3 -> 2 -> 1 -> null

//YOU ARE ESSENTIALLY REVERSING THE POINTERS AS YOU ITERATE THROUGH THE LIST

function reverseList(head) {
  // Approach: Use three pointers to reverse the links
  // prev: points to the previous node (initially null)
  // current: points to the current node being processed
  // next: temporarily stores the next node to avoid losing it
  
  // Your code here

  if (!head) return null
  if (head && !head.next) return head

  let prev = null
  let current = head
  let next = current.next

  while (next) {
    next = current.next
    current.next = prev
    prev = current
    current = next
  }
  return prev
}
